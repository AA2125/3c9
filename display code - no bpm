// This is an example for our Monochrome OLEDs based on SSD1306 drivers

// Pick one up today in the adafruit shop!
// ------> http://www.adafruit.com/category/63_98

// This example is for a 128x64 pixel display using SPI to communicate
// 4 or 5 pins are required to interface.

// Adafruit invests time and resources providing this open
// source code, please support Adafruit and open-source
// hardware by purchasing products from Adafruit!

// Written by Limor Fried/Ladyada for Adafruit Industries,
// with contributions from the open source community.
// BSD license, check license.txt for more information
// All text above, and the splash screen below must be
// included in any redistribution.
// **************************************************************************/

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Timer.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using software SPI (default case):
#define OLED_MOSI   10
#define OLED_CLK   9
#define OLED_DC    12
#define OLED_CS    13
#define OLED_RESET 11
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

/* Comment out above, uncomment this block to use hardware SPI
#define OLED_DC     6
#define OLED_CS     7
#define OLED_RESET  8
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT,
  &SPI, OLED_DC, OLED_RESET, OLED_CS);
*/

#define NUMFLAKES     10 // Number of snowflakes in the animation example

#define LOGO_HEIGHT   16
#define LOGO_WIDTH    16
static const unsigned char PROGMEM logo_bmp[] =
{ 0b00000000, 0b11000000,
  0b00000001, 0b11000000,
  0b00000001, 0b11000000,
  0b00000011, 0b11100000,
  0b11110011, 0b11100000,
  0b11111110, 0b11111000,
  0b01111110, 0b11111111,
  0b00110011, 0b10011111,
  0b00011111, 0b11111100,
  0b00001101, 0b01110000,
  0b00011011, 0b10100000,
  0b00111111, 0b11100000,
  0b00111111, 0b11110000,
  0b01111100, 0b11110000,
  0b01110000, 0b01110000,
  0b00000000, 0b00110000 };

int j = 0;
int v2_old = 0;
int v2 = 0;
int bpm = 0;

void setup() {
  //Serial.begin(9600);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }


  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(2000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  // Draw a single pixel in white
  // display.display() is NOT necessary after every single drawing command,
  // unless that's what you want...rather, you can batch up a bunch of
  // drawing operations and then update the screen all at once by calling
  // display.display(). These examples demonstrate both approaches...


  line();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.cp437(true);

}

void loop() {
  wave();

}


void line() {
  display.clearDisplay();
  display.drawLine(0, 56, 128, 56, WHITE);
  display.setCursor(0, 0);
  display.print("BPM =");
  display.display();
  //delay(1000);
 
}

void wave(){


    float v = analogRead(A0);
    float v1  = ((v)/1024)*64;    //scales the output to fit the screen 


    v2 = map(v1, 0, 64, 64, 0);
    int jm = j%128;         // to help it reset everytime it has taken 128 pixels
    //Serial.println(d);
    if(jm == 0){
      line();
      j = 0;
    }
    
     
    display.drawPixel(jm, v2, WHITE);
    display.drawLine(jm-1,v2,jm-1, v2_old, WHITE);      // creates a line between the points
    //display.print(bpm);
    display.display();
    v2_old = v2;
    j++;
    //delay(7.8);

}
